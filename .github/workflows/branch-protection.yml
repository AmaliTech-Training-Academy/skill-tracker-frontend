name: Branch Protection

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

jobs:
  check-required-status:
    runs-on: ubuntu-latest
    steps:
      - name: Enforce required checks
        uses: actions/github-script@v7
        with:
          script: |
            const requiredChecks = ['security', 'quality'];
            console.log('🔒 PRODUCTION: Enforcing required status checks:', requiredChecks.join(', '));
            console.log('⚠️ All checks must pass before merge to main');
            console.log('✅ Status check validation completed');
  enforce-staging-to-main:
    runs-on: ubuntu-latest
    steps:
      - name: Validate source branch
        run: |
          echo "🔍 Base: ${{ github.base_ref }} | Head: ${{ github.head_ref }}"
          if [[ "${{ github.head_ref }}" != "staging" ]]; then
            echo "❌ PRODUCTION RULE: Only PRs from 'staging' can be merged into 'main'."
            echo "🚫 Direct commits to main are not allowed."
            exit 1
          fi
          echo "✅ Valid: PR is from 'staging' → 'main'."

  require-approvals:
    runs-on: ubuntu-latest
    steps:
      - name: Check required approvals
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request?.number || context.issue.number;
            const base_ref = context.payload.pull_request?.base?.ref || context.payload.pull_request?.base_ref;

            const { data: reviews } = await github.rest.pulls.listReviews({ owner, repo, pull_number });

            // Get unique approved reviewers (avoid counting duplicates)
            const approvals = [...new Set(
              reviews
                .filter(r => r.state === "APPROVED")
                .map(r => r.user.login)
            )];

            const required = 3; // Always require 3 approvals for main

            console.log(`📊 PRODUCTION Target: ${base_ref} | Approvals: ${approvals.length}/${required}`);
            console.log(`👥 Approved by: ${approvals.join(', ') || 'None'}`);

            if (approvals.length < required) {
              core.setFailed(`❌ PRODUCTION RULE: Need ${required} approvals for main branch, got ${approvals.length}`);
            } else {
              console.log(`✅ PRODUCTION APPROVED: Got ${approvals.length}/${required} required approvals`);
            }